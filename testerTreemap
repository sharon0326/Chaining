package A1;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.SortedSet;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.stream.Collectors;
import java.util.*;

public class testing {
	static <K,V extends Comparable<? super V>> SortedSet<Map.Entry<K,V>> entriesSortedByValues(Map<K,V> map) {
        SortedSet<Map.Entry<K,V>> sortedEntries = new TreeSet<Map.Entry<K,V>>(
            new Comparator<Map.Entry<K,V>>() {
                @Override public int compare(Map.Entry<K,V> e1, Map.Entry<K,V> e2) {
                    int res = e1.getValue().compareTo(e2.getValue());
                    return res != 0 ? res : 1; // Special fix to preserve items with equal values
                }
            }
        );
        sortedEntries.addAll(map.entrySet());
        return sortedEntries;
    }
	public static void main(String[] args) {
		int w = 10;
		int seed = 0;

		Open_Addressing openAddressing =  new Open_Addressing(w, seed,-1);
		//for (int i =0; i< openAddressing.m; i++) {
		//	System.out.println(openAddressing.Table[i]);
		//}
		System.out.println(openAddressing.probe(0,32));
		//System.out.println(openAddressing.insertKey(32));
		/*
		System.out.println(openAddressing.r);
		for (int i =0; i< openAddressing.m; i++) {
			System.out.println("  "+i);
			System.out.println(openAddressing.Table[i]);
		}*/
		
		
		   List<List<String>> lists = new ArrayList<List<String>>();
		    lists.add(new ArrayList<String>(Arrays.asList("123", "234", "23","234")));
		    //lists.add(new ArrayList<Integer>(Arrays.asList(1, 6, 7, 9, 3)));
		    //lists.add(new ArrayList<Integer>(Arrays.asList(1, 3, 10, 11,9)));
		    //lists.add(new ArrayList<Integer>(Arrays.asList(1, 3)));
		    lists.add(new ArrayList<String>(Arrays.asList("123")));
		    System.out.println(lists.toString());
		    List<String> commons = new ArrayList<String>();
		    commons.addAll(lists.get(0));
		    for (ListIterator<List<String>> iter = lists.listIterator(0); iter.hasNext(); ) {
		        commons.retainAll(iter.next());
		    }

		    System.out.println(commons);
		    
		    Map<String, Integer> nonSortedMap = new HashMap<String, Integer>();
		    nonSortedMap.put("ape", 1);
		    nonSortedMap.put("pig", 3);
		    nonSortedMap.put("cow", 1);
		    nonSortedMap.put("frog", 2);

		    for (Entry<String, Integer> entry  : entriesSortedByValues(nonSortedMap)) {
		        System.out.println(entry.getKey()+":"+entry.getValue());
		    }
		    
		    TreeMap<String, Integer> map = new TreeMap<String, Integer>();
		    map.put("werter318", 3);
		    map.put("Runelink2", 1);
		    map.put("baron951", 2);
		    map.put("baroGHJn951", 4);
		    NavigableMap<String, Integer> descMap = map.descendingMap();
		    Set<String> keySet = descMap.keySet();
		    for(String key : keySet){
		    int value = descMap .get(key);
		    System.out.println(key + " - " + value);
		    }
		    
	}
}
