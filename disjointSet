package A1;

import java.io.*;
import java.util.*;

public class DisjointSets {

    private int[] par;
    private int[] rank;
    
    /* contructor: creates a partition of n elements. */
    /* Each element is in a separate disjoint set */
    DisjointSets(int n) {
        if (n>0) {
            par = new int[n];
            rank = new int[n];
            for (int i=0; i<this.par.length; i++) {
                par[i] = i;
            }
        }
    }
    
    public String toString(){
        int pari,countsets=0;
        String output = "";
        String[] setstrings = new String[this.par.length];
        /* build string for each set */
        for (int i=0; i<this.par.length; i++) {
            pari = find(i);
            if (setstrings[pari]==null) {
                setstrings[pari] = String.valueOf(i);
                countsets+=1;
            } else {
                setstrings[pari] += "," + i;
            }
        }
        /* print strings */
        output = countsets + " set(s):\n";
        for (int i=0; i<this.par.length; i++) {
            if (setstrings[i] != null) {
                output += i + " : " + setstrings[i] + "\n";
            }
        }
        return output;
    }
    
    /* find resentative of element i */
    public int find(int i) {
    	if (par[i] == i) {
    		return i;
    		} 
    	else {
    		par[i] = find(par[i]);
    		return par[i];
    	}
    }
           
    /* merge sets containing elements i and j */
   public int union(int i, int j) {
	   int rooti =find(i);
	   int rootj = find(j);
	   int len = par.length;
	   
	    if (rank[rooti] > rank[rootj]){
	       	for (int a=0;a<len;a++){
	       		if (par[rootj] == par[find(a)]){
	       			par[find(a)]= par[rooti];
	       		}
	       	}
	       	return par[rooti];
	       }
	    
	    
	    else if (rank[rootj] < rank[rooti]){   	
	       	for (int b=0;b<len;b++){
	       		if (par[rootj] == par[find(b)]){
	       			par[find(b)]= par[rooti];
	       		}
	       	}
	       	return par[rooti];
	     
	    }
	    
	    else if(par[rooti] != par[rootj]){
	    	rank[rootj]++;	    	
	       	for (int c=0;c<len;c++){
	       		if (par[rooti] == par[find(c)]){
	       			par[find(c)]= par[rootj];
	       		}
	       	}
	       	return par[rootj];
	       
	    }
	    else {
	    	return par[rooti];
	    }
   }

   private int update (int from, int to){
   	for (int b=0;b<par.length;b++){
   		if (par[find(from)] == par[find(b)]){
   			par[find(b)]= par[find(to)];
   		}
   	}
   	return par[find(to)];
   }

   	
    public static void main(String[] args) {
        DisjointSets myset = new DisjointSets(6);
        System.out.println(myset);
        System.out.println("-> Union 2 and 3");
        myset.union(2,3);
        System.out.println(myset);
        System.out.println("-> Union 2 and 3");
        myset.union(2,3);
        System.out.println(myset);
        System.out.println("-> Union 2 and 1");
        myset.union(2,1);
        System.out.println(myset);
        System.out.println("-> Union 4 and 5");
        myset.union(4,5);
        System.out.println(myset);
        System.out.println("-> Union 3 and 1");
        myset.union(3,1);
        System.out.println(myset);
        System.out.println("-> Union 2 and 4");
        myset.union(2,4);
        System.out.println(myset);
        
    }

}
